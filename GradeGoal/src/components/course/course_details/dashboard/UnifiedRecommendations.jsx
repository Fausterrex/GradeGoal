// ========================================
// UNIFIED RECOMMENDATIONS COMPONENT
// ========================================
// Consolidated component that displays AI-generated recommendations

import React, { useState, useEffect, useMemo } from "react";
import AIRecommendationCard from "../../../ai/components/AIRecommendationCard";
import AIAnalysisDisplay from "../../../ai/components/AIAnalysisDisplay";
import { getAIRecommendations, saveAIRecommendations } from "../../../ai/services/geminiService";

function UnifiedRecommendations({ 
  course, 
  grades, 
  categories, 
  targetGrade, 
  currentGrade,
  userAnalytics 
}) {
  const [aiRecommendations, setAiRecommendations] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Load AI recommendations when component mounts or course changes
  useEffect(() => {
    const loadAIRecommendations = async () => {
      if (!course?.id) return;

      setLoading(true);
      setError(null);

      try {
        const recommendations = await getAIRecommendations(course.userId, course.id);
        setAiRecommendations(recommendations);
      } catch (err) {
        console.error('Error loading AI recommendations:', err);
        setError('Failed to load AI recommendations');
      } finally {
        setLoading(false);
      }
    };

    loadAIRecommendations();
  }, [course?.id, course?.userId]);

  const handleDismissRecommendation = async (recommendationId) => {
    try {
      // For now, we'll just update the local state without calling the backend
      // This avoids the database connection issues
      console.log('Simulating recommendation dismissal for ID:', recommendationId);
      
      // Remove from local state
      setAiRecommendations(prev => 
        prev.filter(rec => rec.recommendationId !== recommendationId)
      );
    } catch (err) {
      console.error('Error dismissing recommendation:', err);
    }
  };

  const handleMarkAsRead = async (recommendationId) => {
    try {
      // For now, we'll just update the local state without calling the backend
      // This avoids the database connection issues
      console.log('Simulating recommendation mark as read for ID:', recommendationId);
      
      // Update local state
      setAiRecommendations(prev => 
        prev.map(rec => 
          rec.recommendationId === recommendationId 
            ? { ...rec, isRead: true }
            : rec
        )
      );
    } catch (err) {
      console.error('Error marking recommendation as read:', err);
    }
  };

  // Show loading state
  if (loading) {
        return (
      <div className="bg-white rounded border border-gray-200 p-6">
        <div className="flex items-center gap-3 mb-2">
          <span className="text-2xl">ü§ñ</span>
          <h3 className="text-lg font-semibold text-gray-900">AI Recommendations</h3>
        </div>
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto"></div>
          <p className="text-gray-600 mt-2">Loading AI recommendations...</p>
        </div>
      </div>
    );
  }

  // Show error state
  if (error) {
        return (
      <div className="bg-white rounded border border-gray-200 p-6">
        <div className="flex items-center gap-3 mb-2">
          <span className="text-2xl">ü§ñ</span>
          <h3 className="text-lg font-semibold text-gray-900">AI Recommendations</h3>
        </div>
        <div className="text-center py-8">
          <span className="text-4xl text-red-500">‚ö†Ô∏è</span>
          <p className="text-gray-700 mt-2 font-medium">Error loading recommendations</p>
          <p className="text-gray-500">{error}</p>
        </div>
      </div>
    );
  }

  // Show empty state
  if (aiRecommendations.length === 0) {
    return (
      <div className="bg-white rounded border border-gray-200 p-6">
        <div className="flex items-center gap-3 mb-2">
          <span className="text-2xl">ü§ñ</span>
          <h3 className="text-lg font-semibold text-gray-900">AI Recommendations</h3>
        </div>
        <div className="text-center py-8">
          <span className="text-4xl text-gray-400">üß†</span>
          <p className="text-gray-700 mt-2 font-medium">No AI recommendations yet</p>
          <p className="text-gray-500">Generate AI analysis from your academic goals to get personalized recommendations.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded border border-gray-200 p-6">
        <div className="flex items-center gap-3 mb-2">
          <span className="text-2xl">ü§ñ</span>
          <h3 className="text-lg font-semibold text-gray-900">AI Recommendations</h3>
        </div>
        <p className="text-sm text-gray-600">
          Personalized insights and recommendations generated by AI based on your academic performance
        </p>
        <div className="mt-2 text-xs text-gray-500">
          {aiRecommendations.length} recommendation{aiRecommendations.length !== 1 ? 's' : ''} available
        </div>
      </div>

      {/* AI Recommendations List */}
      <div className="space-y-4">
        {aiRecommendations.map((recommendation, index) => {
          // Check if this is the new AI analysis format
          if (recommendation.recommendationType === 'AI_ANALYSIS' && recommendation.content) {
            try {
              const content = typeof recommendation.content === 'string' ? JSON.parse(recommendation.content) : recommendation.content;
              // If it has the new format structure, use AIAnalysisDisplay
              if (content.focusIndicators || content.scorePredictions || content.achievementProbability) {
                return (
                  <AIAnalysisDisplay
                    key={recommendation.recommendationId || `ai-analysis-${index}`}
                    analysisData={recommendation}
                  />
                );
              }
            } catch (error) {
              console.error('Error parsing recommendation content:', error);
            }
          }
          
          // Use the old AIRecommendationCard for other formats
          return (
            <AIRecommendationCard
              key={recommendation.recommendationId || `recommendation-${index}`}
              recommendation={recommendation}
              onDismiss={handleDismissRecommendation}
              onMarkRead={handleMarkAsRead}
            />
          );
        })}
      </div>
    </div>
  );
}

export default UnifiedRecommendations;