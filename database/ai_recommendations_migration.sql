-- ========================================
-- AI RECOMMENDATIONS DATABASE MIGRATION
-- ========================================
-- Updates the recommendations table to support AI-generated recommendations

-- Add new recommendation types for AI
ALTER TABLE `recommendations` 
MODIFY COLUMN `recommendation_type` enum(
    'STUDY_STRATEGY',
    'GRADE_IMPROVEMENT', 
    'TIME_MANAGEMENT',
    'GOAL_ADJUSTMENT',
    'AI_ANALYSIS',
    'PREDICTED_GRADE',
    'ASSESSMENT_RECOMMENDATION',
    'GOAL_PROBABILITY',
    'STATUS_UPDATE',
    'STUDY_HABITS'
) NOT NULL;

-- Add new columns for AI recommendations
ALTER TABLE `recommendations` 
ADD COLUMN `ai_generated` tinyint(1) DEFAULT '0' COMMENT 'Whether this recommendation was generated by AI',
ADD COLUMN `ai_confidence` decimal(3,2) DEFAULT NULL COMMENT 'AI confidence score (0.00-1.00)',
ADD COLUMN `ai_model` varchar(100) DEFAULT NULL COMMENT 'AI model used for generation',
ADD COLUMN `ai_prompt_hash` varchar(64) DEFAULT NULL COMMENT 'Hash of the prompt used for generation',
ADD COLUMN `expires_at` timestamp NULL DEFAULT NULL COMMENT 'When this recommendation expires',
ADD COLUMN `metadata` json DEFAULT NULL COMMENT 'Additional AI metadata';

-- Add indexes for AI recommendations
ALTER TABLE `recommendations`
ADD INDEX `idx_ai_generated` (`ai_generated`),
ADD INDEX `idx_ai_confidence` (`ai_confidence`),
ADD INDEX `idx_ai_model` (`ai_model`),
ADD INDEX `idx_created_ai` (`created_at`, `ai_generated`);

-- Update existing recommendations to mark them as non-AI
UPDATE `recommendations` 
SET `ai_generated` = 0 
WHERE `ai_generated` IS NULL;

-- Create a view for AI recommendations
CREATE VIEW `ai_recommendations_view` AS
SELECT 
    r.*,
    c.course_name,
    c.course_code,
    u.first_name,
    u.last_name
FROM `recommendations` r
LEFT JOIN `courses` c ON r.course_id = c.course_id
LEFT JOIN `users` u ON r.user_id = u.user_id
WHERE r.ai_generated = 1;

-- Create stored procedure to clean up expired AI recommendations
DELIMITER ;;
CREATE PROCEDURE `CleanupExpiredAIRecommendations`()
BEGIN
    DELETE FROM `recommendations` 
    WHERE `ai_generated` = 1 
    AND `expires_at` IS NOT NULL 
    AND `expires_at` < NOW();
    
    SELECT ROW_COUNT() as deleted_count;
END ;;
DELIMITER ;

-- Create stored procedure to get AI recommendations for a user
DELIMITER ;;
CREATE PROCEDURE `GetAIRecommendations`(
    IN p_user_id BIGINT,
    IN p_course_id BIGINT DEFAULT NULL,
    IN p_limit INT DEFAULT 50
)
BEGIN
    SELECT 
        r.*,
        c.course_name,
        c.course_code
    FROM `recommendations` r
    LEFT JOIN `courses` c ON r.course_id = c.course_id
    WHERE r.user_id = p_user_id
    AND r.ai_generated = 1
    AND (p_course_id IS NULL OR r.course_id = p_course_id)
    AND r.is_dismissed = 0
    ORDER BY 
        CASE r.priority 
            WHEN 'HIGH' THEN 1 
            WHEN 'MEDIUM' THEN 2 
            WHEN 'LOW' THEN 3 
        END,
        r.created_at DESC
    LIMIT p_limit;
END ;;
DELIMITER ;

-- Create stored procedure to mark AI recommendations as read
DELIMITER ;;
CREATE PROCEDURE `MarkAIRecommendationAsRead`(
    IN p_recommendation_id BIGINT,
    IN p_user_id BIGINT
)
BEGIN
    UPDATE `recommendations` 
    SET `is_read` = 1 
    WHERE `recommendation_id` = p_recommendation_id 
    AND `user_id` = p_user_id
    AND `ai_generated` = 1;
    
    SELECT ROW_COUNT() as updated_count;
END ;;
DELIMITER ;

-- Create stored procedure to dismiss AI recommendations
DELIMITER ;;
CREATE PROCEDURE `DismissAIRecommendation`(
    IN p_recommendation_id BIGINT,
    IN p_user_id BIGINT
)
BEGIN
    UPDATE `recommendations` 
    SET `is_dismissed` = 1 
    WHERE `recommendation_id` = p_recommendation_id 
    AND `user_id` = p_user_id
    AND `ai_generated` = 1;
    
    SELECT ROW_COUNT() as updated_count;
END ;;
DELIMITER ;

-- Create stored procedure to get AI recommendation statistics
DELIMITER ;;
CREATE PROCEDURE `GetAIRecommendationStats`(
    IN p_user_id BIGINT,
    IN p_course_id BIGINT DEFAULT NULL
)
BEGIN
    SELECT 
        COUNT(*) as total_recommendations,
        SUM(CASE WHEN is_read = 0 THEN 1 ELSE 0 END) as unread_count,
        SUM(CASE WHEN priority = 'HIGH' THEN 1 ELSE 0 END) as high_priority_count,
        SUM(CASE WHEN created_at > DATE_SUB(NOW(), INTERVAL 7 DAY) THEN 1 ELSE 0 END) as recent_count,
        AVG(ai_confidence) as avg_confidence
    FROM `recommendations` 
    WHERE `user_id` = p_user_id
    AND `ai_generated` = 1
    AND (p_course_id IS NULL OR `course_id` = p_course_id)
    AND `is_dismissed` = 0;
END ;;
DELIMITER ;

-- Insert sample AI recommendation types into the enum (if needed)
-- This is handled by the ALTER TABLE statement above

-- Create trigger to automatically set AI metadata
DELIMITER ;;
CREATE TRIGGER `ai_recommendation_metadata_trigger`
BEFORE INSERT ON `recommendations`
FOR EACH ROW
BEGIN
    IF NEW.ai_generated = 1 THEN
        -- Set default AI model if not provided
        IF NEW.ai_model IS NULL THEN
            SET NEW.ai_model = 'gemini-1.5-flash';
        END IF;
        
        -- Set default expiration (30 days) if not provided
        IF NEW.expires_at IS NULL THEN
            SET NEW.expires_at = DATE_ADD(NOW(), INTERVAL 30 DAY);
        END IF;
        
        -- Set default confidence if not provided
        IF NEW.ai_confidence IS NULL THEN
            SET NEW.ai_confidence = 0.75;
        END IF;
    END IF;
END ;;
DELIMITER ;

-- Grant necessary permissions (adjust as needed for your setup)
-- GRANT EXECUTE ON PROCEDURE CleanupExpiredAIRecommendations TO 'your_app_user'@'localhost';
-- GRANT EXECUTE ON PROCEDURE GetAIRecommendations TO 'your_app_user'@'localhost';
-- GRANT EXECUTE ON PROCEDURE MarkAIRecommendationAsRead TO 'your_app_user'@'localhost';
-- GRANT EXECUTE ON PROCEDURE DismissAIRecommendation TO 'your_app_user'@'localhost';
-- GRANT EXECUTE ON PROCEDURE GetAIRecommendationStats TO 'your_app_user'@'localhost';

-- Create a scheduled event to clean up expired recommendations (optional)
-- SET GLOBAL event_scheduler = ON;
-- CREATE EVENT IF NOT EXISTS `cleanup_expired_ai_recommendations`
-- ON SCHEDULE EVERY 1 DAY
-- STARTS CURRENT_TIMESTAMP
-- DO
--   CALL CleanupExpiredAIRecommendations();

COMMIT;
